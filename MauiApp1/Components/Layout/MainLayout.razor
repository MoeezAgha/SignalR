@inherits LayoutComponentBase

@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager Navigation
@implements IAsyncDisposable

<div class="page">
    <div class="sidebar">
        <NavMenu />
    </div>

    <main>
        <div class="top-row px-4">
            <a href="https://learn.microsoft.com/aspnet/core/" target="_blank">About</a>
        </div>

        <article class="content px-4">
            <p>Connecting as: @userName</p>

            <ul id="messagesList">
                @foreach (var message in messages)
                {
                    <li>@message</li>
                }
            </ul>
            @Body
        </article>
    </main>
</div>

@code {
    private HubConnection? hubConnection;
    private List<string> messages = new List<string>();
    private string userName = DeviceInfo.Current.Name + "77"; // Set a default or get from settings

    protected override async Task OnInitializedAsync()
    {
        Navigation.LocationChanged += OnLocationChanged;
        await Connect();
    }

    private async void OnLocationChanged(object? sender, Microsoft.AspNetCore.Components.Routing.LocationChangedEventArgs e)
    {
        await Connect();
    }

    private async Task Connect()
    {
        try
        {
            if (hubConnection != null)
            {
                await hubConnection.StopAsync();
                await hubConnection.DisposeAsync();
            }

            hubConnection = new HubConnectionBuilder()
                .WithUrl(Navigation.ToAbsoluteUri($"https://localhost:7148/messageHub?userName={userName}"))
                .Build();

            hubConnection.On<string, string>("ReceiveMessage", async (user, message) =>
            {

                // Display alert
                await MainThread.InvokeOnMainThreadAsync(async () =>
                {
                    await Application.Current.MainPage.DisplayAlert("Alert", "You have been alerted", "OK");
                    string action = await Application.Current.MainPage.DisplayActionSheet("ActionSheet: SavePhoto?", "Cancel", "Delete", "Photo Roll", "Email");

                });

                var encodedMsg = $"{user}: {message}";
                messages.Add(encodedMsg);
                InvokeAsync(StateHasChanged);
            });

            await hubConnection.StartAsync();
        }
        catch (Exception ex)
        {
            // Handle exception (log it, show message, etc.)
            Console.WriteLine($"Error connecting to SignalR: {ex.Message}");
        }
    }

    public async ValueTask DisposeAsync()
    {
        Navigation.LocationChanged -= OnLocationChanged;
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}
